name: 使用PyInstaller进行跨平台构建并发布

on:
  push:
    branches:
      - main         # 更改为您的主分支名称

jobs:
  build:
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]

    runs-on: ${{ matrix.os }}

    steps:
    - name: 检查代码
      uses: actions/checkout@v2

    - name: 设置Python
      uses: actions/setup-python@v2
      with:
        python-version: 3.11.7  # 配置你所需的Python版本

    - name: 安装依赖项
      run: |
        python -m pip install --upgrade pip
        pip install pyinstaller

    - name: 构建可执行文件
      run: |
        if [ "$RUNNER_OS" == "Windows" ]; then
          pyinstaller --onefile --windowed -i icon.ico GUI.py
        elif [ "$RUNNER_OS" == "Linux" ]; then
          pyinstaller --onefile --windowed -i icon.ico GUI.py
        elif [ "$RUNNER_OS" == "macOS" ]; then
          pyinstaller --onefile --windowed -i icon.icns GUI.py
        fi

    - name: Upload artifacts
      uses: actions/upload-artifact@v2
      with:
        name: app-${{ matrix.os }}
        path: dist/*.exe       # 对于Windows
        path: dist/*.AppImage  # 对于Linux
        path: dist/*.app       # 对于macOS
        if: always()           # 确保即使在失败的情况下也能上传构建产物

  create_release:
    needs: build
    runs-on: ubuntu-latest
    environment: release

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up GitHub CLI
      run: |
        curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg
        echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null
        sudo apt update && sudo apt install gh

    - name: Create or get latest release tag
      id: get_latest_tag
      run: |
        LATEST_TAG=$(gh release view --json tagName --jq .tagName)
        echo ::set-output name=latest_tag::${LATEST_TAG}

    - name: Download all platform artifacts
      uses: actions/download-artifact@v2
      with:
        path: dist/

    - name: Create new GitHub Release
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # 这里使用GitHub Actions默认提供的token
      run: |
        gh release create "${{ steps.get_latest_tag.outputs.latest_tag }}" \
          --title "Release ${{ steps.get_latest_tag.outputs.latest_tag }}" \
          --notes "Automated cross-platform release for commit $(git rev-parse HEAD)" \
          --target "${{ steps.get_latest_tag.outputs.latest_tag }}" \
          --draft \
          --prerelease \
          dist/*

    # 如果您不希望每次都是草稿或预发布版，请移除 `--draft` 和 `--prerelease` 参数
