name: 自动构建与发布

on:
  push:
    branches:
      - main
      - dev
      - hotfix/*
    tags:
      - '*'

jobs:
  build:
    name: PyInstaller构建
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [windows-latest, ubuntu-latest, macos-latest]
        python-version: [3.11.7]

    steps:
      - name: Checkout 代码
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      
      - name: 安装Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
      
      - name: 安装依赖
        run: |
          pip install -r requirements.txt
      
      - name: 安装PyInstaller
        run: |
          pip install pyinstaller
      
      - name: 通过PyInstaller构建
        run: |
          if [ "$RUNNER_OS" == "Windows" ]; then
            pyinstaller --onefile --windowed -y -i icon.ico GUI.py
          elif [ "$RUNNER_OS" == "Linux" ]; then
            pyinstaller --onefile --windowed -y -i icon.ico GUI.py
          elif [ "$RUNNER_OS" == "macOS" ]; then
            pyinstaller --onefile --windowed -y -i icon.icns GUI.py
          fi
        shell: bash
      
      - name: 上传 Windows 工程
        id: upload-windows-artifact
        uses: actions/upload-artifact@v3
        if: startsWith(matrix.os, 'windows')
        with:
          name: app-${{ matrix.os }}.exe
          path: dist/*.exe
      
      - name: 上传 Linux 工程
        id: upload-linux-artifact
        uses: actions/upload-artifact@v3
        if: startsWith(matrix.os, 'ubuntu')
        with:
          name: app-${{ matrix.os }}
          path: dist/GUI
      
      - name: 上传 macOS 工程
        id: upload-macos-artifact
        uses: actions/upload-artifact@v3
        if: startsWith(matrix.os, 'macos')
        with:
          name: app-${{ matrix.os }}.app
          path: dist/*.app
      
      - name: 压缩 macOS 应用程序
        if: startsWith(matrix.os, 'macos-latest')
        run: |
          cd dist
          zip -r app-macos.zip *.app # 使用通配符来匹配“.app”目录
        shell: bash
      
      - name: 列出 artifact
        run: ls -l dist

  release:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout 代码
        uses: actions/checkout@v3
      
      - name: 自动版本标签
        id: tag_version
        uses: actions/github-script@v5
        with:
          script: |
            const { repo: { owner, repo } } = context;
            let tags = await github.rest.repos.listTags({
              owner: owner,
              repo: repo,
            });
            tags = tags.data.map(tag => tag.name);
            let newTag = 'v1.0.0';

            if (tags.length > 0) {
              const latestTag = tags.sort().pop();
              let [major, minor, patch] = latestTag.replace('v', '').split('.').map(num => parseInt(num));
              
              if (patch === 9) {
                minor += 1;
                patch = 0;
              } else {
                patch += 1;
              }

              if (minor === 10) {
                major += 1;
                minor = 0;
              }

              newTag = `v${major}.${minor}.${patch}`;
              while (tags.includes(newTag)) {
                if (patch === 9) {
                  minor += 1;
                  patch = 0;
                } else {
                  patch += 1;
                }
                if (minor === 10) {
                  major += 1;
                  minor = 0;
                }
                newTag = `v${major}.${minor}.${patch}`;
              }
            }

            core.setOutput('new_tag', newTag);
      
      - name: 创建发布
        id: create_release
        uses: actions/create-release@v2
        env:
          GITHUB_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
        with:
          tag_name: ${{ steps.tag_version.outputs.new_tag }}
          release_name: Release ${{ steps.tag_version.outputs.new_tag }}
          draft: false
          prerelease: false

      - name: 列出构建文件
        run: ls -l ./dist/
      
      - name: 上传 Windows 构建至发布
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./dist/*.exe
          asset_name: app-windows-latest.exe
          asset_content_type: application/octet-stream
      
      - name: 上传 Linux 构建至发布
        uses: actions/upload-release-asset@v2
        env:
          GITHUB_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./dist/GUI
          asset_name: app-ubuntu-latest
          asset_content_type: application/octet-stream
      
      - name: 上传 macOS 构建及压缩文件至发布
        uses: actions/upload-release-asset@v2
        env:
          GITHUB_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./dist/*.zip
          asset_name: app-macos-latest.zip
          asset_content_type: application/zip



