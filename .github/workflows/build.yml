name: 构建

on:
  push:
    branches:
      - main

jobs:
  build:
    name: PyInstaller构建
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [windows-latest, ubuntu-latest, macos-latest]
        python-version: [3.11.7]

    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 0
    
    - name: 安装Python
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: 安装依赖
      run: |
        pip install -r requirements.txt
    
    - name: 安装PyInstaller
      run: |
        pip install pyinstaller
    
    - name: 通过PyInstaller构建
      run: |
        if [ "$RUNNER_OS" == "Windows" ]; then
          pyinstaller --onefile --windowed -y -i icon.ico GUI.py
        elif [ "$RUNNER_OS" == "Linux" ]; then
          pyinstaller --onefile --windowed -y -i icon.ico GUI.py
        elif [ "$RUNNER_OS" == "macOS" ]; then
          pyinstaller --onefile --windowed -y -i icon.icns GUI.py
        fi
      shell: bash
    
    - name: 上传 Windows 工程
      uses: actions/upload-artifact@v2
      if: startsWith(matrix.os, 'windows')
      with:
        name: app-${{ matrix.os }}.exe
        path: dist/*.exe
    
    - name: 上传 Linux 工程
      uses: actions/upload-artifact@v2
      if: startsWith(matrix.os, 'ubuntu')
      with:
        name: app-${{ matrix.os }}
        path: dist/GUI
    
    - name: 上传 macOS 工程
      uses: actions/upload-artifact@v2
      if: startsWith(matrix.os, 'macos')
      with:
        name: app-${{ matrix.os }}.app
        path: dist/*.app
    
    - name: 压缩 macOS 应用程序
      if: startsWith(matrix.os, 'macos-latest')
      run: |
        cd dist
        zip -r app-macos.zip *.app # 使用通配符来匹配“.app”目录
      shell: bash

    - name: 列出 artifact
      run: ls -l dist

